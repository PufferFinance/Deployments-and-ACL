{"abi":[{"type":"function","name":"addLeafX509","inputs":[{"name":"leafX509Cert","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getIntelRootCAPubKey","inputs":[],"outputs":[{"name":"","type":"tuple","internalType":"struct IEnclaveVerifier.RSAPubKey","components":[{"name":"modulus","type":"bytes","internalType":"bytes"},{"name":"exponent","type":"bytes","internalType":"bytes"}]}],"stateMutability":"pure"},{"type":"function","name":"verifyEvidence","inputs":[{"name":"blockNumber","type":"uint256","internalType":"uint256"},{"name":"raveCommitment","type":"bytes32","internalType":"bytes32"},{"name":"evidence","type":"tuple","internalType":"struct RaveEvidence","components":[{"name":"report","type":"bytes","internalType":"bytes"},{"name":"signature","type":"bytes","internalType":"bytes"},{"name":"leafX509CertDigest","type":"bytes32","internalType":"bytes32"}]},{"name":"mrenclave","type":"bytes32","internalType":"bytes32"},{"name":"mrsigner","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"event","name":"AddedPubKey","inputs":[{"name":"pubKeyHash","type":"bytes32","indexed":true,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"RemovedPubKey","inputs":[{"name":"pubKeyHash","type":"bytes32","indexed":true,"internalType":"bytes32"}],"anonymous":false},{"type":"error","name":"StaleEvidence","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"addLeafX509(bytes)":"27a88ff0","getIntelRootCAPubKey()":"19d2be90","verifyEvidence(uint256,bytes32,(bytes,bytes,bytes32),bytes32,bytes32)":"8c1c9085"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"StaleEvidence\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"pubKeyHash\",\"type\":\"bytes32\"}],\"name\":\"AddedPubKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"pubKeyHash\",\"type\":\"bytes32\"}],\"name\":\"RemovedPubKey\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"leafX509Cert\",\"type\":\"bytes\"}],\"name\":\"addLeafX509\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIntelRootCAPubKey\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"modulus\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"exponent\",\"type\":\"bytes\"}],\"internalType\":\"struct IEnclaveVerifier.RSAPubKey\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"raveCommitment\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"report\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"leafX509CertDigest\",\"type\":\"bytes32\"}],\"internalType\":\"struct RaveEvidence\",\"name\":\"evidence\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"mrenclave\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"mrsigner\",\"type\":\"bytes32\"}],\"name\":\"verifyEvidence\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Puffer Finance\",\"custom:security-contact\":\"security@puffer.fi\",\"errors\":{\"StaleEvidence()\":[{\"details\":\"Signature \\\"0x5d4ad9a9\\\"\"}]},\"events\":{\"AddedPubKey(bytes32)\":{\"details\":\"Signature \\\"0x13b85b042d2bb270091da7111e3b3cc407f6b86c85882cf48ae94123cae22b17\\\"\"},\"RemovedPubKey(bytes32)\":{\"details\":\"Signature \\\"0x0ebd07953ae533bded7d9b0715fa49e0a0ed0a6cef4638a685737ffef8b86254\\\"\"}},\"kind\":\"dev\",\"methods\":{\"addLeafX509(bytes)\":{\"params\":{\"leafX509Cert\":\"certificate\"}},\"verifyEvidence(uint256,bytes32,(bytes,bytes,bytes32),bytes32,bytes32)\":{\"params\":{\"blockNumber\":\"is the block number to fetch 32B_Blockhash\",\"evidence\":\"is the remote attestation evidence\",\"mrenclave\":\"is the MRENCLAVE value expected by the calling contract\",\"mrsigner\":\"is the MRSIGNER value expected by the calling contract\",\"raveCommitment\":\"is the keccak256 hash commitment 32B_Commitment\"},\"returns\":{\"_0\":\"true if evidence verification is a success\"}}},\"title\":\"IEnclaveVerifier interface\",\"version\":1},\"userdoc\":{\"errors\":{\"StaleEvidence()\":[{\"notice\":\"Thrown if the Evidence that we're trying to verify is stale Evidence should be submitted for the recent block < `FRESHNESS_BLOCKS`\"}]},\"events\":{\"AddedPubKey(bytes32)\":{\"notice\":\"Emitted when the `pubKeyHash` is added to valid pubKeys\"},\"RemovedPubKey(bytes32)\":{\"notice\":\"Emitted when the `pubKeyHash` is removed from valid pubKeys\"}},\"kind\":\"user\",\"methods\":{\"addLeafX509(bytes)\":{\"notice\":\"Adds a leaf x509 RSA public key if the x509 was signed by Intel's root CA\"},\"getIntelRootCAPubKey()\":{\"notice\":\"Getter for intelRootCAPubKey\"},\"verifyEvidence(uint256,bytes32,(bytes,bytes,bytes32),bytes32,bytes32)\":{\"notice\":\"Verifies remote attestation evidence: the report contains the expected MRENCLAVE/MRSIGNER values, a valid TCB status, and was signed by an Intel-issued x509 certificate. The report will contain a 64B payload in the form (32B_Commitment || 32B_BlockHash), where 32B_Blockhash is a recent L1 blockhash and 32B_Commitment is a keccak256 hash that the enclave is committing to. The calling contract is expected to precompute raveCommitment from public inputs. The function returns true if the report is valid and the extracted payload matches the expected.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interface/IEnclaveVerifier.sol\":\"IEnclaveVerifier\"},\"evmVersion\":\"cancun\",\"libraries\":{\"src/LibBeaconchainContract.sol:LibBeaconchainContract\":\"0x654ec611b7de54141d9796b35fe22dfd0634f9f0\"},\"metadata\":{\"appendCBOR\":false,\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin-contracts-upgradeable/=lib/pufETH/lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin-upgrades/=lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin-upgrades/=lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin/=lib/openzeppelin-contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/src/\",\":eigenlayer-test/=lib/eigenlayer-contracts/src/test/\",\":eigenlayer/=lib/eigenlayer-contracts/src/contracts/\",\":ens-contracts/=lib/rave/lib/ens-contracts/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":murky/=lib/murky/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":openzeppelin-upgrades/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":openzeppelin/=lib/openzeppelin-contracts/contracts/\",\":pufETH/=lib/pufETH/src/\",\":pufETHScript/=lib/pufETH/script/\",\":pufETHTest/=lib/pufETH/test/\",\":puffer/=src/\",\":rave-test/=lib/rave/test/\",\":rave/=lib/rave/src/\",\":script/=script/\",\":solady/=lib/pufETH/lib/solady/src/\"]},\"sources\":{\"src/interface/IEnclaveVerifier.sol\":{\"keccak256\":\"0x9f780f5cfbde4740bffc4a949f7fb23bb41f6dfd2de1f9ab29cb337bb05ef83e\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://4b76e3a3050acbdfd9acc7aa6f92e1c38cfe626c44540c7237ff4d2751a48d20\",\"dweb:/ipfs/QmTVN6uwTA4sWjgSEB2uo7V6s11pgEHnT2pBvAeqtq45aU\"]},\"src/struct/RaveEvidence.sol\":{\"keccak256\":\"0xc39e67c8aa0194c7d3fc792f32ea5ba18a6b3700104559703144bfb888d5a36c\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://d14ae21003febbfda216b01b1016fd62baf7a66a72a5909bc6a6da71ce655573\",\"dweb:/ipfs/QmU6VNvt2qPA5vtsCNhyEyE2DbybtoDmPGsqRjXXVqjiuX\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.24+commit.e11b9ed9"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"StaleEvidence"},{"inputs":[{"internalType":"bytes32","name":"pubKeyHash","type":"bytes32","indexed":true}],"type":"event","name":"AddedPubKey","anonymous":false},{"inputs":[{"internalType":"bytes32","name":"pubKeyHash","type":"bytes32","indexed":true}],"type":"event","name":"RemovedPubKey","anonymous":false},{"inputs":[{"internalType":"bytes","name":"leafX509Cert","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"addLeafX509"},{"inputs":[],"stateMutability":"pure","type":"function","name":"getIntelRootCAPubKey","outputs":[{"internalType":"struct IEnclaveVerifier.RSAPubKey","name":"","type":"tuple","components":[{"internalType":"bytes","name":"modulus","type":"bytes"},{"internalType":"bytes","name":"exponent","type":"bytes"}]}]},{"inputs":[{"internalType":"uint256","name":"blockNumber","type":"uint256"},{"internalType":"bytes32","name":"raveCommitment","type":"bytes32"},{"internalType":"struct RaveEvidence","name":"evidence","type":"tuple","components":[{"internalType":"bytes","name":"report","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"},{"internalType":"bytes32","name":"leafX509CertDigest","type":"bytes32"}]},{"internalType":"bytes32","name":"mrenclave","type":"bytes32"},{"internalType":"bytes32","name":"mrsigner","type":"bytes32"}],"stateMutability":"view","type":"function","name":"verifyEvidence","outputs":[{"internalType":"bool","name":"","type":"bool"}]}],"devdoc":{"kind":"dev","methods":{"addLeafX509(bytes)":{"params":{"leafX509Cert":"certificate"}},"verifyEvidence(uint256,bytes32,(bytes,bytes,bytes32),bytes32,bytes32)":{"params":{"blockNumber":"is the block number to fetch 32B_Blockhash","evidence":"is the remote attestation evidence","mrenclave":"is the MRENCLAVE value expected by the calling contract","mrsigner":"is the MRSIGNER value expected by the calling contract","raveCommitment":"is the keccak256 hash commitment 32B_Commitment"},"returns":{"_0":"true if evidence verification is a success"}}},"version":1},"userdoc":{"kind":"user","methods":{"addLeafX509(bytes)":{"notice":"Adds a leaf x509 RSA public key if the x509 was signed by Intel's root CA"},"getIntelRootCAPubKey()":{"notice":"Getter for intelRootCAPubKey"},"verifyEvidence(uint256,bytes32,(bytes,bytes,bytes32),bytes32,bytes32)":{"notice":"Verifies remote attestation evidence: the report contains the expected MRENCLAVE/MRSIGNER values, a valid TCB status, and was signed by an Intel-issued x509 certificate. The report will contain a 64B payload in the form (32B_Commitment || 32B_BlockHash), where 32B_Blockhash is a recent L1 blockhash and 32B_Commitment is a keccak256 hash that the enclave is committing to. The calling contract is expected to precompute raveCommitment from public inputs. The function returns true if the report is valid and the extracted payload matches the expected."}},"version":1}},"settings":{"remappings":["@openzeppelin-contracts-upgradeable/=lib/pufETH/lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin-upgrades/=lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable/","@openzeppelin-upgrades/=lib/openzeppelin-contracts-upgradeable/","@openzeppelin/=lib/openzeppelin-contracts/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ds-test/=lib/forge-std/lib/ds-test/src/","eigenlayer-contracts/=lib/eigenlayer-contracts/","eigenlayer-middleware/=lib/eigenlayer-middleware/src/","eigenlayer-test/=lib/eigenlayer-contracts/src/test/","eigenlayer/=lib/eigenlayer-contracts/src/contracts/","ens-contracts/=lib/rave/lib/ens-contracts/contracts/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","murky/=lib/murky/src/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","openzeppelin-upgrades/=lib/openzeppelin-contracts-upgradeable/contracts/","openzeppelin/=lib/openzeppelin-contracts/contracts/","pufETH/=lib/pufETH/src/","pufETHScript/=lib/pufETH/script/","pufETHTest/=lib/pufETH/test/","puffer/=src/","rave-test/=lib/rave/test/","rave/=lib/rave/src/","script/=script/","solady/=lib/pufETH/lib/solady/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"none","appendCBOR":false},"compilationTarget":{"src/interface/IEnclaveVerifier.sol":"IEnclaveVerifier"},"evmVersion":"cancun","libraries":{"src/LibBeaconchainContract.sol:LibBeaconchainContract":"0x654ec611b7de54141d9796b35fe22dfd0634f9f0"}},"sources":{"src/interface/IEnclaveVerifier.sol":{"keccak256":"0x9f780f5cfbde4740bffc4a949f7fb23bb41f6dfd2de1f9ab29cb337bb05ef83e","urls":["bzz-raw://4b76e3a3050acbdfd9acc7aa6f92e1c38cfe626c44540c7237ff4d2751a48d20","dweb:/ipfs/QmTVN6uwTA4sWjgSEB2uo7V6s11pgEHnT2pBvAeqtq45aU"],"license":"GPL-3.0"},"src/struct/RaveEvidence.sol":{"keccak256":"0xc39e67c8aa0194c7d3fc792f32ea5ba18a6b3700104559703144bfb888d5a36c","urls":["bzz-raw://d14ae21003febbfda216b01b1016fd62baf7a66a72a5909bc6a6da71ce655573","dweb:/ipfs/QmU6VNvt2qPA5vtsCNhyEyE2DbybtoDmPGsqRjXXVqjiuX"],"license":"GPL-3.0"}},"version":1},"id":202}